--!strict
-- RoundedUI: cross-platform UI library with rounded corners and rich controls

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer

local function create(instance, props, children)
    local obj = Instance.new(instance)
    for k, v in pairs(props or {}) do
        obj[k] = v
    end
    for _, child in ipairs(children or {}) do
        child.Parent = obj
    end
    return obj
end

local function addCorner(parent, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = UDim.new(0, radius or 8)
    c.Parent = parent
    return c
end

local function addStroke(parent, color, thickness, transparency)
    local s = Instance.new("UIStroke")
    s.Color = color or Color3.fromRGB(60, 60, 60)
    s.Thickness = thickness or 1
    s.Transparency = transparency or 0.4
    s.Parent = parent
    return s
end

local function addPadding(parent, pad)
    local p = Instance.new("UIPadding")
    p.PaddingTop = UDim.new(0, pad)
    p.PaddingBottom = UDim.new(0, pad)
    p.PaddingLeft = UDim.new(0, pad)
    p.PaddingRight = UDim.new(0, pad)
    p.Parent = parent
    return p
end

local function withHover(btn, base, hover)
    btn.MouseEnter:Connect(function()
        btn.BackgroundColor3 = hover
    end)
    btn.MouseLeave:Connect(function()
        btn.BackgroundColor3 = base
    end)
end

local function isMobile()
    return UIS.TouchEnabled and not UIS.KeyboardEnabled
end

local Theme = {
    bg = Color3.fromRGB(20, 20, 24),
    panel = Color3.fromRGB(28, 28, 34),
    panel2 = Color3.fromRGB(32, 32, 40),
    stroke = Color3.fromRGB(60, 60, 70),
    accent = Color3.fromRGB(140, 90, 255), -- softer purple accent
    accentDim = Color3.fromRGB(110, 70, 210),
    text = Color3.fromRGB(230, 230, 240),
    textDim = Color3.fromRGB(180, 180, 190),
    good = Color3.fromRGB(90, 200, 120),
    warn = Color3.fromRGB(230, 80, 80),
    control = Color3.fromRGB(45, 45, 55),
    hover = Color3.fromRGB(55, 55, 70),
}

local FONT = Enum.Font.Gotham
local FONT_B = Enum.Font.GothamBold

local RoundedUI = {}

-- Internal: Color picker popup
--!strict
-- Enhanced Color Picker Popup with HSV controls and hex input

--!strict
-- Enhanced Color Picker based on Advanced Color Picker by Viperdune
-- Adapted for RoundedUI library

--!strict
-- Fixed Color Picker with proper layout

--!strict
-- Fixed Color Picker - corrected vertical slider and preview position

--!strict
-- Fixed Color Picker - correct hue gradient and preview placement

local function createColorPickerPopup(rootGui, startColor, onApply)
    -- Overlay
    -- Overlay (covers whole screen including safe area)
local overlay = create("TextButton", {
    Name = "ColorPickerOverlay",
    Position = UDim2.new(0, 0, 0, 0),
    Size = UDim2.fromScale(1, 1),
    BackgroundColor3 = Color3.fromRGB(0, 0, 0),
    BackgroundTransparency = 0.45,
    Text = "",
    ZIndex = 200,
    AutoButtonColor = false,
}, {})
overlay.Parent = rootGui


    -- Main popup window
    local popup = create("Frame", {
        Name = "ColorPickerWindow",
        Size = UDim2.new(0, 340, 0, 440),
        Position = UDim2.new(0.5, -170, 0.5, -220),
        BackgroundColor3 = Theme.bg,
        ZIndex = 201,
    }, {})
    popup.Parent = overlay
    addCorner(popup, 12)
    addStroke(popup, Theme.stroke, 2, 0.4)

    -- Title bar
    local titleBar = create("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = Theme.panel2,
        ZIndex = 202,
    }, {})
    titleBar.Parent = popup
    addCorner(titleBar, 12)
    addStroke(titleBar, Theme.stroke, 1, 0.5)

    local title = create("TextLabel", {
        Size = UDim2.new(1, -20, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = "Color Picker",
        TextColor3 = Theme.text,
        Font = FONT_B,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 203,
    }, {})
    title.Parent = titleBar

    -- Content container
    local content = create("Frame", {
        Name = "Content",
        Size = UDim2.new(1, -24, 0, 240),
        Position = UDim2.new(0, 12, 0, 52),
        BackgroundTransparency = 1,
        ZIndex = 202,
    }, {})
    content.Parent = popup

    -- Initialize HSV
    local H, S, V = 0, 1, 1
    if startColor then
        H, S, V = startColor:ToHSV()
    end

    -- ===== MAIN COLOR PICKER SQUARE =====
    local pickerSize = 240
    local pickerFrame = create("Frame", {
        Name = "ColorPicker",
        Size = UDim2.new(0, pickerSize, 0, pickerSize),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = Color3.fromHSV(H, 1, 1),
        BorderSizePixel = 0,
        ZIndex = 203,
        ClipsDescendants = false,
    }, {})
    pickerFrame.Parent = content
    addCorner(pickerFrame, 10)
    addStroke(pickerFrame, Theme.stroke, 2, 0.3)

    -- White to transparent gradient (Saturation)
    local satGradient = create("Frame", {
        Name = "SaturationGradient",
        Size = UDim2.fromScale(1, 1),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BackgroundTransparency = 0,
        BorderSizePixel = 0,
        ZIndex = 204,
    }, {})
    satGradient.Parent = pickerFrame
    addCorner(satGradient, 10)

    local satGrad = Instance.new("UIGradient")
    satGrad.Color = ColorSequence.new(Color3.new(1, 1, 1))
    satGrad.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(1, 1),
    })
    satGrad.Rotation = 0
    satGrad.Parent = satGradient

    -- Black gradient overlay (Value)
    local valGradient = create("Frame", {
        Name = "ValueGradient",
        Size = UDim2.fromScale(1, 1),
        BackgroundColor3 = Color3.new(0, 0, 0),
        BackgroundTransparency = 0,
        BorderSizePixel = 0,
        ZIndex = 205,
    }, {})
    valGradient.Parent = pickerFrame
    addCorner(valGradient, 10)

    local valGrad = Instance.new("UIGradient")
    valGrad.Color = ColorSequence.new(Color3.new(0, 0, 0))
    valGrad.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 1),
        NumberSequenceKeypoint.new(1, 0),
    })
    valGrad.Rotation = 90
    valGrad.Parent = valGradient

    -- Invisible button for input
    local pickerButton = create("TextButton", {
        Name = "PickerButton",
        Size = UDim2.fromScale(1, 1),
        BackgroundTransparency = 1,
        Text = "",
        ZIndex = 206,
    }, {})
    pickerButton.Parent = pickerFrame

    -- Selection cursor
    local cursor = create("Frame", {
        Name = "Cursor",
        Size = UDim2.new(0, 20, 0, 20),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        ZIndex = 207,
    }, {})
    cursor.Parent = pickerFrame

    local cursorOuter = create("Frame", {
        Size = UDim2.fromScale(1, 1),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BorderSizePixel = 0,
        ZIndex = 207,
    }, {})
    cursorOuter.Parent = cursor
    addCorner(cursorOuter, 10)

    local cursorInner = create("Frame", {
        Size = UDim2.new(1, -4, 1, -4),
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.new(0, 0, 0),
        BorderSizePixel = 0,
        ZIndex = 208,
    }, {})
    cursorInner.Parent = cursorOuter
    addCorner(cursorInner, 8)



local sliderWidth = 24

-- Outer container: styling + clipping
local hueSlider = create("Frame", {
    Name = "HueSlider",
    Size = UDim2.new(0, sliderWidth, 0, pickerSize),
    Position = UDim2.new(0, pickerSize + 8, 0, 0),
    BackgroundTransparency = 1,   -- container only
    BorderSizePixel = 0,
    ZIndex = 203,
    ClipsDescendants = true,      -- clip rounded corners
}, {})
hueSlider.Parent = content
addCorner(hueSlider, 8)
addStroke(hueSlider, Theme.stroke, 2, 0.3)

-- Inner fill: visible surface for the gradient
local hueFill = create("Frame", {
    Name = "HueFill",
    AnchorPoint = Vector2.new(0.5, 0.5),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    Size = UDim2.new(1, -2, 1, -2),
    BackgroundColor3 = Color3.new(1, 1, 1), -- non-transparent
    BackgroundTransparency = 0,
    BorderSizePixel = 0,
    ZIndex = 203,
}, {})
hueFill.Parent = hueSlider
addCorner(hueFill, 8)

-- Full spectrum gradient, vertical top->bottom
local hueGrad = Instance.new("UIGradient")
hueGrad.Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0.000, Color3.new(1, 0, 0)),  -- Red
    ColorSequenceKeypoint.new(0.166, Color3.new(1, 1, 0)),  -- Yellow
    ColorSequenceKeypoint.new(0.333, Color3.new(0, 1, 0)),  -- Green
    ColorSequenceKeypoint.new(0.500, Color3.new(0, 1, 1)),  -- Cyan
    ColorSequenceKeypoint.new(0.666, Color3.new(0, 0, 1)),  -- Blue
    ColorSequenceKeypoint.new(0.833, Color3.new(1, 0, 1)),  -- Magenta
    ColorSequenceKeypoint.new(1.000, Color3.new(1, 0, 0)),  -- Red (close loop)
})
hueGrad.Rotation = 90
hueGrad.Parent = hueFill

-- Transparent click target covering the slider
local hueButton = create("TextButton", {
    Name = "HueButton",
    Size = UDim2.fromScale(1, 1),
    BackgroundTransparency = 1,
    Text = "",
    ZIndex = 204,
}, {})
hueButton.Parent = hueSlider

-- Cursor above the fill
local hueCursor = create("Frame", {
    Name = "HueCursor",
    Size = UDim2.new(1, 6, 0, 6),
    Position = UDim2.new(0.5, 0, 0, 0),
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundColor3 = Color3.new(1, 1, 1),
    BorderSizePixel = 0,
    ZIndex = 205,
}, {})
hueCursor.Parent = hueSlider
addCorner(hueCursor, 3)
addStroke(hueCursor, Color3.new(0, 0, 0), 2, 0)


    local hueButton = create("TextButton", {
        Name = "HueButton",
        Size = UDim2.fromScale(1, 1),
        BackgroundTransparency = 1,
        Text = "",
        ZIndex = 204,
    }, {})
    hueButton.Parent = hueSlider

    local hueCursor = create("Frame", {
        Name = "HueCursor",
        Size = UDim2.new(1, 6, 0, 6),
        Position = UDim2.new(0.5, 0, 0, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.new(1, 1, 1),
        BorderSizePixel = 0,
        ZIndex = 205,
    }, {})
    hueCursor.Parent = hueSlider
    addCorner(hueCursor, 3)
    addStroke(hueCursor, Color3.new(0, 0, 0), 2, 0)

    -- ===== COLOR PREVIEW (справа от hue slider) =====
    local preview = create("Frame", {
        Name = "Preview",
        Size = UDim2.new(0, 36, 0, pickerSize),
        Position = UDim2.new(0, pickerSize + sliderWidth + 16, 0, 0),
        BackgroundColor3 = Color3.fromHSV(H, S, V),
        BorderSizePixel = 0,
        ZIndex = 203,
    }, {})
    preview.Parent = content
    addCorner(preview, 10)
    addStroke(preview, Theme.stroke, 2, 0.3)

    -- ===== INFO PANEL (RGB & HEX) =====
    local infoPanel = create("Frame", {
        Name = "InfoPanel",
        Size = UDim2.new(1, -24, 0, 100),
        Position = UDim2.new(0, 12, 0, 304),
        BackgroundColor3 = Theme.panel2,
        ZIndex = 202,
    }, {})
    infoPanel.Parent = popup
    addCorner(infoPanel, 10)
    addStroke(infoPanel, Theme.stroke, 1, 0.4)
    addPadding(infoPanel, 10)

    -- RGB Inputs
    local function createNumberInput(name, yPos)
        local label = create("TextLabel", {
            Size = UDim2.new(0, 25, 0, 24),
            Position = UDim2.new(0, 0, 0, yPos),
            BackgroundTransparency = 1,
            Text = name .. ":",
            TextColor3 = Theme.textDim,
            Font = FONT,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 203,
        }, {})
        label.Parent = infoPanel

        local input = create("TextBox", {
            Size = UDim2.new(0, 70, 0, 24),
            Position = UDim2.new(0, 30, 0, yPos),
            BackgroundColor3 = Theme.control,
            Text = "255",
            TextColor3 = Theme.text,
            Font = FONT,
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Center,
            ClearTextOnFocus = false,
            ZIndex = 203,
        }, {})
        input.Parent = infoPanel
        addCorner(input, 6)
        addStroke(input, Theme.stroke, 1, 0.4)

        return input
    end

    local rInput = createNumberInput("R", 0)
    local gInput = createNumberInput("G", 30)
    local bInput = createNumberInput("B", 60)

    -- Hex Input
    local hexLabel = create("TextLabel", {
        Size = UDim2.new(0, 40, 0, 24),
        Position = UDim2.new(0, 120, 0, 30),
        BackgroundTransparency = 1,
        Text = "HEX:",
        TextColor3 = Theme.textDim,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
        ZIndex = 203,
    }, {})
    hexLabel.Parent = infoPanel

    local hexInput = create("TextBox", {
        Size = UDim2.new(1, -170, 0, 24),
        Position = UDim2.new(0, 165, 0, 30),
        BackgroundColor3 = Theme.control,
        Text = "#FFFFFF",
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Center,
        ClearTextOnFocus = false,
        ZIndex = 203,
    }, {})
    hexInput.Parent = infoPanel
    addCorner(hexInput, 6)
    addStroke(hexInput, Theme.stroke, 1, 0.4)

    -- ===== BUTTONS =====
    local buttonContainer = create("Frame", {
        Name = "Buttons",
        Size = UDim2.new(1, -24, 0, 38),
        Position = UDim2.new(0, 12, 1, -12),
        AnchorPoint = Vector2.new(0, 1),
        BackgroundTransparency = 1,
        ZIndex = 202,
    }, {})
    buttonContainer.Parent = popup

    local cancelBtn = create("TextButton", {
        Name = "CancelButton",
        Size = UDim2.new(0.48, 0, 1, 0),
        BackgroundColor3 = Theme.control,
        Text = "Cancel",
        TextColor3 = Theme.text,
        Font = FONT_B,
        TextSize = 16,
        ZIndex = 203,
    }, {})
    cancelBtn.Parent = buttonContainer
    addCorner(cancelBtn, 8)
    withHover(cancelBtn, Theme.control, Theme.hover)

    local applyBtn = create("TextButton", {
        Name = "ApplyButton",
        Size = UDim2.new(0.48, 0, 1, 0),
        Position = UDim2.new(0.52, 0, 0, 0),
        BackgroundColor3 = Theme.accent,
        Text = "Apply",
        TextColor3 = Theme.text,
        Font = FONT_B,
        TextSize = 16,
        ZIndex = 203,
    }, {})
    applyBtn.Parent = buttonContainer
    addCorner(applyBtn, 8)
    withHover(applyBtn, Theme.accent, Theme.accentDim)

    -- ===== UPDATE FUNCTIONS =====
    local updatingFromCode = false

    local function updateVisuals()
        updatingFromCode = true
        
        local currentColor = Color3.fromHSV(H, S, V)
        
        -- Update main picker background
        pickerFrame.BackgroundColor3 = Color3.fromHSV(H, 1, 1)
        
        -- Update cursor position
        cursor.Position = UDim2.new(S, 0, 1 - V, 0)
        
        -- Update hue cursor position
        hueCursor.Position = UDim2.new(0.5, 0, H, 0)
        
        -- Update preview
        preview.BackgroundColor3 = currentColor
        
        -- Update RGB inputs
        local r = math.floor(currentColor.R * 255 + 0.5)
        local g = math.floor(currentColor.G * 255 + 0.5)
        local b = math.floor(currentColor.B * 255 + 0.5)
        
        rInput.Text = tostring(r)
        gInput.Text = tostring(g)
        bInput.Text = tostring(b)
        
        -- Update hex input
        hexInput.Text = "#" .. currentColor:ToHex():upper()
        
        updatingFromCode = false
    end

    -- ===== INPUT HANDLERS =====
    local draggingPicker = false
    local draggingHue = false

    -- Main picker dragging
    pickerButton.MouseButton1Down:Connect(function()
        draggingPicker = true
        
        local function updateFromMouse(inputPos)
            local relX = math.clamp((inputPos.X - pickerFrame.AbsolutePosition.X) / pickerFrame.AbsoluteSize.X, 0, 1)
            local relY = math.clamp((inputPos.Y - pickerFrame.AbsolutePosition.Y) / pickerFrame.AbsoluteSize.Y, 0, 1)
            S = relX
            V = 1 - relY
            updateVisuals()
        end
        
        updateFromMouse(UIS:GetMouseLocation())
    end)

    -- Hue slider dragging
    hueButton.MouseButton1Down:Connect(function()
        draggingHue = true
        
        local function updateHue(inputPos)
            local relY = math.clamp((inputPos.Y - hueSlider.AbsolutePosition.Y) / hueSlider.AbsoluteSize.Y, 0, 1)
            H = relY
            updateVisuals()
        end
        
        updateHue(UIS:GetMouseLocation())
    end)

    -- Global input handling
    UIS.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            if draggingPicker then
                local relX = math.clamp((input.Position.X - pickerFrame.AbsolutePosition.X) / pickerFrame.AbsoluteSize.X, 0, 1)
                local relY = math.clamp((input.Position.Y - pickerFrame.AbsolutePosition.Y) / pickerFrame.AbsoluteSize.Y, 0, 1)
                S = relX
                V = 1 - relY
                updateVisuals()
            elseif draggingHue then
                local relY = math.clamp((input.Position.Y - hueSlider.AbsolutePosition.Y) / hueSlider.AbsoluteSize.Y, 0, 1)
                H = relY
                updateVisuals()
            end
        end
    end)

    UIS.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            draggingPicker = false
            draggingHue = false
        end
    end)

    -- RGB input handlers
    local function handleRGBInput()
        if updatingFromCode then return end
        
        local r = math.clamp(tonumber(rInput.Text) or 0, 0, 255) / 255
        local g = math.clamp(tonumber(gInput.Text) or 0, 0, 255) / 255
        local b = math.clamp(tonumber(bInput.Text) or 0, 0, 255) / 255
        
        local color = Color3.new(r, g, b)
        H, S, V = color:ToHSV()
        updateVisuals()
    end

    rInput.FocusLost:Connect(handleRGBInput)
    gInput.FocusLost:Connect(handleRGBInput)
    bInput.FocusLost:Connect(handleRGBInput)

    -- Hex input handler
    hexInput.FocusLost:Connect(function()
        if updatingFromCode then return end
        
        local text = hexInput.Text
        if text:sub(1, 1) == "#" then
            text = text:sub(2)
        end
        
        local success, result = pcall(function()
            return Color3.fromHex(text)
        end)
        
        if success then
            H, S, V = result:ToHSV()
            updateVisuals()
        else
            updateVisuals()
        end
    end)

    -- Button handlers
    applyBtn.MouseButton1Click:Connect(function()
        if onApply then
            onApply(Color3.fromHSV(H, S, V))
        end
        overlay:Destroy()
    end)

    cancelBtn.MouseButton1Click:Connect(function()
        overlay:Destroy()
    end)

    -- Click outside to close
    overlay.MouseButton1Click:Connect(function()
        local mouse = UIS:GetMouseLocation()
        local pos = Vector2.new(mouse.X, mouse.Y - 36)
        local p0 = popup.AbsolutePosition
        local ps = popup.AbsoluteSize
        
        local inside = pos.X >= p0.X and pos.X <= p0.X + ps.X and
                      pos.Y >= p0.Y and pos.Y <= p0.Y + ps.Y
        
        if not inside then
            overlay:Destroy()
        end
    end)

    -- Initial update
    updateVisuals()
end

-- API: Window -> Tabs -> UnderSections -> Controls
function RoundedUI.CreateWindow(nameLeft: string, nameRight: string)
    local gui = create("ScreenGui", {
        Name = "RoundedUI",
        ResetOnSpawn = false,
        IgnoreGuiInset = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
    }, {})
    gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local window = create("Frame", {
        Name = "Window",
        Size = UDim2.new(isMobile() and 0.95 or 0.6, 0, isMobile() and 0.8 or 0.7, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Theme.bg,
    }, {})
    window.Parent = gui
    addCorner(window, 12)
    addStroke(window, Theme.stroke, 1, 0.6)
    addPadding(window, 10)

    -- Header
    local header = create("Frame", {
        Name = "Header",
        Size = UDim2.new(1, 0, 0, 32),
        BackgroundColor3 = Theme.panel,
    }, {})
    header.Parent = window
    addCorner(header, 10)
    addStroke(header, Theme.stroke, 1, 0.6)

    local leftTitle = create("TextLabel", {
        Size = UDim2.new(0.5, -8, 1, 0),
        Position = UDim2.new(0, 8, 0, 0),
        BackgroundTransparency = 1,
        Text = nameLeft or "UI",
        TextColor3 = Theme.text,
        Font = FONT_B,
        TextSize = 16,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, {})
    leftTitle.Parent = header

    local rightTitle = create("TextLabel", {
        Size = UDim2.new(0.5, -8, 1, 0),
        Position = UDim2.new(0.5, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = nameRight or "",
        TextColor3 = Theme.textDim,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Right,
    }, {})
    rightTitle.Parent = header

    -- Tabs strip
	do
    local dragging = false
    local dragStart
    local startPos

    header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = window.Position
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            window.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)

    UIS.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
end

    local tabsStrip = create("ScrollingFrame", {
        Name = "Tabs",
        Size = UDim2.new(1, 0, 0, 44),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = Theme.panel2,
        ScrollBarThickness = 4,
        ScrollingDirection = Enum.ScrollingDirection.X,
        CanvasSize = UDim2.new(0, 0, 0, 0),
    }, {})
    tabsStrip.Parent = window
    addCorner(tabsStrip, 10)
    addStroke(tabsStrip, Theme.stroke, 1, 0.5)
    addPadding(tabsStrip, 6)

    local tabsLayout = Instance.new("UIListLayout")
    tabsLayout.FillDirection = Enum.FillDirection.Horizontal
    tabsLayout.Padding = UDim.new(0, 6)
    tabsLayout.Parent = tabsStrip

    -- Content area
    local content = create("Frame", {
        Name = "Content",
        Size = UDim2.new(1, 0, 1, -80),
        Position = UDim2.new(0, 0, 0, 80),
        BackgroundColor3 = Theme.bg,
    }, {})
    content.Parent = window
    addPadding(content, 6)

    local api = {}

    local tabs = {}

    local function recalcTabsCanvas()
        local total = 0
        for _, child in ipairs(tabsStrip:GetChildren()) do
            if child:IsA("GuiObject") then
                total = total + child.AbsoluteSize.X + 6
            end
        end
        tabsStrip.CanvasSize = UDim2.new(0, total, 0, 0)
    end

    function api:AddSection(tabName: string)
        -- Tab button
        local btn = create("TextButton", {
            Size = UDim2.new(0, 120, 1, -12),
            BackgroundColor3 = Theme.control,
            Text = tabName,
            TextColor3 = Theme.text,
            Font = FONT_B,
            TextSize = 16,
        }, {})
        addCorner(btn, 8)
        withHover(btn, Theme.control, Theme.hover)
        btn.Parent = tabsStrip

        -- Tab page
        local page = create("Frame", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = (#tabs == 0),
        }, {})
        page.Parent = content

        tabs[tabName] = {button=btn, page=page}

        -- Switch tab on click
        btn.MouseButton1Click:Connect(function()
            for name, data in pairs(tabs) do
    data.page.Visible = (name == tabName)
    data.button.BackgroundColor3 = (name == tabName) and Theme.accent or Theme.control
    data.button.Font = (name == tabName) and FONT_B or FONT
end

            -- Внутри btn.MouseButton1Click:Connect(function() ... end)
for name, data in pairs(tabs) do
    data.page.Visible = (name == tabName)
    data.button.BackgroundColor3 = (name == tabName) and Theme.accent or Theme.control
    data.button.Font = (name == tabName) and FONT_B or FONT
end
-- УДАЛИТЬ строку: leftTitle.Text = tabName

        end)

        -- UnderSections container (two columns)
        local container = create("Frame", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
        }, {})
        container.Parent = page

        local columns = create("Frame", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
        }, {})
        columns.Parent = container

        local leftCol = create("ScrollingFrame", {
            Size = UDim2.new(0.5, -6, 1, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 6,
        }, {})
        leftCol.Parent = columns

        local rightCol = create("ScrollingFrame", {
            Size = UDim2.new(0.5, -6, 1, 0),
            Position = UDim2.new(0.5, 6, 0, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 6,
        }, {})
        rightCol.Parent = columns
leftCol.AutomaticCanvasSize = Enum.AutomaticSize.Y
rightCol.AutomaticCanvasSize = Enum.AutomaticSize.Y

        local function makeSection(parentCol, sectionName)
		local openPopup -- единственный открытый попап в секции

local function closePopup()
    if openPopup and openPopup.Parent then
        openPopup:Destroy()
    end
    openPopup = nil
end

-- Закрывать попап при скролле колонны


		
            local sec = create("Frame", {
                Size = UDim2.new(1, -6, 0, 40),
                BackgroundColor3 = Theme.panel,
            }, {})
            sec.Parent = parentCol
            addCorner(sec, 10)
            addStroke(sec, Theme.stroke, 1, 0.6)
            addPadding(sec, 8)

            local title = create("TextLabel", {
                Size = UDim2.new(1, 0, 0, 20),
                BackgroundTransparency = 1,
                Text = sectionName or "",
                TextColor3 = Theme.text,
                Font = FONT_B,
                TextSize = 15,
                TextXAlignment = Enum.TextXAlignment.Left,
            }, {})
            title.Parent = sec

            local stack = create("Frame", {
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 0, 24),
                BackgroundTransparency = 1,
            }, {})
            stack.Parent = sec

            local list = Instance.new("UIListLayout")
            list.Padding = UDim.new(0, 6)
            list.FillDirection = Enum.FillDirection.Vertical
            list.SortOrder = Enum.SortOrder.LayoutOrder
            list.Parent = stack

            local function resize()
                sec.Size = UDim2.new(1, -6, 0, 24 + stack.AbsoluteSize.Y + 12)
                
            end
            stack.Changed:Connect(resize)
            RunService.RenderStepped:Connect(resize)

            local sectionAPI = {}

            function sectionAPI:Label(text, opts)
    opts = opts or {}
    local topMargin = opts.topMargin or 6
    local align = opts.align or Enum.TextXAlignment.Left
    local bold = opts.bold or false
    local size = opts.size or 14
    local color = opts.color or Theme.textDim

    local spacer = create("Frame", {
        Size = UDim2.new(1, 0, 0, topMargin),
        BackgroundTransparency = 1,
    }, {})
    spacer.Parent = stack

    local lbl = create("TextLabel", {
        Size = UDim2.new(1, 0, 0, size + 2),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = color,
        Font = bold and FONT_B or FONT,
        TextSize = size,
        TextXAlignment = align,
    }, {})
    lbl.Parent = stack
    return lbl
end

function sectionAPI:ToggleWithBind(text, opts)
    opts = opts or {}
    local state = opts.Default or false
    local bindKey: Enum.KeyCode = opts.Bind or Enum.KeyCode.F
    local onToggle = opts.Callback
    local onTrigger = opts.Trigger -- вызывается при нажатии бинда (опционально)

    local row = create("Frame", {
        Size = UDim2.new(1, 0, 0, 34),
        BackgroundTransparency = 1,
    }, {})
    row.Parent = stack

    -- toggle box
    local box = create("TextButton", {
        Size = UDim2.new(0, 28, 0, 28),
        BackgroundColor3 = state and Theme.accent or Theme.control,
        Text = "",
        Position = UDim2.new(0, 0, 0, 3),
    }, {})
    addCorner(box, 6)
    addStroke(box, Theme.stroke, 1, 0.5)
    box.Parent = row

    local lbl = create("TextLabel", {
        Size = UDim2.new(0.55, 0, 1, 0),
        Position = UDim2.new(0, 36, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, {})
    lbl.Parent = row

    local keyBtn = create("TextButton", {
        Size = UDim2.new(0.35, -6, 1, 0),
        Position = UDim2.new(0.65, 6, 0, 0),
        BackgroundColor3 = Theme.control,
        TextColor3 = Theme.text,
        Font = FONT_B,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Center,
        Text = bindKey.Name,
    }, {})
    addCorner(keyBtn, 8)
    addStroke(keyBtn, Theme.stroke, 1, 0.5)
    keyBtn.Parent = row

    local recording = false
    local function setState(val)
        state = val
        box.BackgroundColor3 = state and Theme.accent or Theme.control
        if onToggle then onToggle(state, bindKey) end
    end

    box.MouseButton1Click:Connect(function()
        setState(not state)
    end)

    keyBtn.MouseButton1Click:Connect(function()
        recording = true
        keyBtn.Text = "Press key..."
        keyBtn.BackgroundColor3 = Theme.accentDim
    end)

    UIS.InputBegan:Connect(function(input, gp)
        if gp then return end
        if recording and input.UserInputType == Enum.UserInputType.Keyboard then
            bindKey = input.KeyCode
            keyBtn.Text = bindKey.Name
            keyBtn.BackgroundColor3 = Theme.control
            recording = false
        elseif input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == bindKey then
            -- триггер по бинде
            setState(not state)
            if onTrigger then onTrigger(state, bindKey) end
        end
    end)

    return {
        Set = setState,
        Get = function() return state end,
        SetBind = function(newKey)
            bindKey = newKey
            keyBtn.Text = bindKey.Name
        end
    }
end


            function sectionAPI:Separator()
                local sep = create("Frame", {
                    Size = UDim2.new(1, 0, 0, 1),
                    BackgroundColor3 = Theme.stroke,
                }, {})
                sep.Parent = stack
                return sep
            end

            function sectionAPI:Button(text, callback)
                local btn = create("TextButton", {
                    Size = UDim2.new(1, 0, 0, 34),
                    BackgroundColor3 = Theme.control,
                    Text = text,
                    TextColor3 = Theme.text,
                    Font = FONT_B,
                    TextSize = 14,
                }, {})
                addCorner(btn, 8)
                withHover(btn, Theme.control, Theme.hover)
                btn.Parent = stack
                btn.MouseButton1Click:Connect(function()
                    if callback then callback() end
                end)
                return btn
            end

            function sectionAPI:Toggle(text, opts)
                local state = (opts and opts.Default) or false
                local row = create("Frame", {
                    Size = UDim2.new(1, 0, 0, 34),
                    BackgroundTransparency = 1,
                }, {})
                row.Parent = stack

                local box = create("TextButton", {
                    Size = UDim2.new(0, 28, 0, 28),
                    BackgroundColor3 = state and Theme.accent or Theme.control,
                    Text = "",
                    TextColor3 = Theme.text,
                    Font = FONT_B,
                    TextSize = 14,
                    Position = UDim2.new(0, 0, 0, 3),
                }, {})
                addCorner(box, 6)
                addStroke(box, Theme.stroke, 1, 0.5)
                box.Parent = row

                local lbl = create("TextLabel", {
                    Size = UDim2.new(1, -36, 1, 0),
                    Position = UDim2.new(0, 36, 0, 0),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = Theme.text,
                    Font = FONT,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left,
                }, {})
                lbl.Parent = row

                local function set(val)
                    state = val
                    box.BackgroundColor3 = state and Theme.accent or Theme.control
                    if opts and opts.Callback then opts.Callback(state) end
                end

                box.MouseButton1Click:Connect(function()
                    set(not state)
                end)
                return {
                    Set = set,
                    Get = function() return state end
                }
            end

            function sectionAPI:ToggleBind(text, opts)
                local bindKey: Enum.KeyCode? = (opts and opts.Bind) or Enum.KeyCode.R
                local toggle = sectionAPI:Toggle(text, {Default = (opts and opts.Default) or false, Callback = (opts and opts.Callback)})
                local hint = sectionAPI:Label(("Bind: %s"):format(tostring(bindKey)))
                hint.TextColor3 = Theme.textDim

                UIS.InputBegan:Connect(function(input, gp)
                    if gp then return end
                    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == bindKey then
                        toggle.Set(not toggle.Get())
                    end
                end)

                return {
                    Set = toggle.Set,
                    Get = toggle.Get,
                    SetBind = function(newKey)
                        bindKey = newKey
                        hint.Text = ("Bind: %s"):format(tostring(bindKey))
                    end
                }
            end

function sectionAPI:Slider(text, cfg, callback)
    local min = cfg.min or 0
    local max = cfg.max or 100
    local value = cfg.default or min
    local suffix = cfg.suffix or ""
    local showPercent = cfg.showPercent or false
    local showReset = (cfg.showReset ~= false)

    local container = create("Frame", {
        Size = UDim2.new(1, 0, 0, 72),
        BackgroundTransparency = 1,
    }, {})
    container.Parent = stack

    local top = create("TextLabel", {
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = ("%s: %s%s"):format(text, tostring(value), suffix),
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, {})
    top.Parent = container

    local bar = create("Frame", {
        Size = UDim2.new(1, 0, 0, 18),
        Position = UDim2.new(0, 0, 0, 26),
        BackgroundColor3 = Theme.control,
    }, {})
    addCorner(bar, 8)
    bar.Parent = container

    local fill = create("Frame", {
        Size = UDim2.new((value - min) / (max - min), 0, 1, 0),
        BackgroundColor3 = Theme.accent,
    }, {})
    addCorner(fill, 8)
    fill.Parent = bar

    -- forward declare
    local set

    -- define set BEFORE any handler uses it
    set = function(v)
        value = math.clamp(v, min, max)
        local rel = (value - min) / (max - min)
        fill.Size = UDim2.new(rel, 0, 1, 0)

        if showPercent then
            local pct = math.floor(rel * 100 + 0.5)
            top.Text = ("%s: %d%%"):format(text, pct)
        else
            local display = string.format("%.2f", value):gsub(",", "")
            top.Text = ("%s: %s%s"):format(text, display, suffix)
        end

        if callback then callback(value) end
    end

    -- Reset row (optional)
    if showReset then
        local resetBtn = create("TextButton", {
            Size = UDim2.new(0, 64, 0, 20),
            BackgroundColor3 = Theme.control,
            Text = "Reset",
            TextColor3 = Theme.text,
            Font = FONT_B,
            TextSize = 12,
        }, {})
        addCorner(resetBtn, 6)
        withHover(resetBtn, Theme.control, Theme.hover)

        local actionsRow = create("Frame", {
            Size = UDim2.new(1, 0, 0, 24),
            Position = UDim2.new(0, 0, 0, 46),
            BackgroundTransparency = 1,
        }, {})
        actionsRow.Parent = container

        resetBtn.Parent = actionsRow
        resetBtn.Position = UDim2.new(1, -68, 0, 2)

        resetBtn.MouseButton1Click:Connect(function()
            -- guard: set exists now
            set(cfg.default or min)
        end)
    end

    bar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            local conn
            conn = UIS.InputChanged:Connect(function(ch)
                if ch.UserInputType == Enum.UserInputType.MouseMovement or ch.UserInputType == Enum.UserInputType.Touch then
                    local rel = math.clamp((ch.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X, 0, 1)
                    set(min + (max - min) * rel)
                end
            end)
            UIS.InputEnded:Connect(function(endInput)
                if endInput.UserInputType == input.UserInputType then
                    if conn then conn:Disconnect() end
                end
            end)
        end
    end)

    return {
        Set = set,
        Get = function() return value end
    }
end


function sectionAPI:DropDown(text, options, default, callback)
    local container = create("Frame", {
        Size = UDim2.new(1, 0, 0, 56),
        BackgroundTransparency = 1,
    }, {})
    container.Parent = stack

    local lbl = create("TextLabel", {
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, {})
    lbl.Parent = container

    local current = default or options[1]
    local btn = create("TextButton", {
        Size = UDim2.new(1, 0, 0, 28),
        Position = UDim2.new(0, 0, 0, 24),
        BackgroundColor3 = Theme.control,
        Text = tostring(current),
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        ZIndex = 5,
    }, {})
    addCorner(btn, 8)
    addStroke(btn, Theme.stroke, 1, 0.5)
    btn.Parent = container

    local function open()
        if openPopup then closePopup() end

        local rootGui = stack:FindFirstAncestorOfClass("ScreenGui")
        local overlay = create("TextButton", {
            Size = UDim2.fromScale(1,1),
            BackgroundTransparency = 1,
            Text = "",
            ZIndex = 200,
        }, {})
        overlay.Parent = rootGui

        local popup = create("Frame", {
            Size = UDim2.new(0, btn.AbsoluteSize.X, 0, math.min(#options * 26, 150)),
            Position = UDim2.new(0, btn.AbsolutePosition.X, 0, btn.AbsolutePosition.Y + btn.AbsoluteSize.Y),
            BackgroundColor3 = Theme.panel2,
            ZIndex = 201,
        }, {})
        addCorner(popup, 8)
        addStroke(popup, Theme.stroke, 1, 0.5)
        popup.Parent = rootGui

        local scroll = create("ScrollingFrame", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 6,
            CanvasSize = UDim2.new(0, 0, 0, #options * 26),
            ZIndex = 202,
        }, {})
        scroll.Parent = popup

        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 4)
        layout.Parent = scroll

        for _, opt in ipairs(options) do
            local item = create("TextButton", {
                Size = UDim2.new(1, -8, 0, 24),
                BackgroundColor3 = Theme.control,
                Text = tostring(opt),
                TextColor3 = Theme.text,
                Font = FONT,
                TextSize = 14,
                ZIndex = 203,
            }, {})
            addCorner(item, 6)
            item.Parent = scroll

            item.MouseButton1Click:Connect(function()
                current = opt
                btn.Text = tostring(current)
                if callback then callback(current) end
                overlay:Destroy()
                popup:Destroy()
                openPopup = nil
            end)
        end

        overlay.MouseButton1Click:Connect(function()
            overlay:Destroy()
            popup:Destroy()
            openPopup = nil
        end)

        openPopup = popup
    end

    btn.MouseButton1Click:Connect(function()
        if openPopup then
            openPopup:Destroy()
            openPopup = nil
        else
            open()
        end
    end)

    return {
        Get = function() return current end,
        Set = function(val)
            if table.find(options, val) then
                current = val
                btn.Text = tostring(current)
                if callback then callback(current) end
            end
        end
    }
end

function sectionAPI:List(text, options, callback)
    local container = create("Frame", {
        Size = UDim2.new(1, 0, 0, 56),
        BackgroundTransparency = 1,
    }, {})
    container.Parent = stack

    local lbl = create("TextLabel", {
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, {})
    lbl.Parent = container

    local statusText = "Choose..."
    local btn = create("TextButton", {
        Size = UDim2.new(1, 0, 0, 28),
        Position = UDim2.new(0, 0, 0, 24),
        BackgroundColor3 = Theme.control,
        Text = statusText,
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        ZIndex = 5,
    }, {})
    addCorner(btn, 8)
    addStroke(btn, Theme.stroke, 1, 0.5)
    btn.Parent = container

    local selected = {}
    local function updateStatus()
        local keys = {}
        for name, on in pairs(selected) do
            if on then table.insert(keys, name) end
        end
        btn.Text = (#keys > 0) and table.concat(keys, ", ") or statusText
    end

    local function open()
        if openPopup then closePopup() end

        local rootGui = stack:FindFirstAncestorOfClass("ScreenGui")
        local overlay = create("TextButton", {
            Size = UDim2.fromScale(1,1),
            BackgroundTransparency = 1,
            Text = "",
            ZIndex = 200,
        }, {})
        overlay.Parent = rootGui

        local popup = create("Frame", {
            Size = UDim2.new(0, btn.AbsoluteSize.X, 0, math.min(#options * 26, 150)),
            Position = UDim2.new(0, btn.AbsolutePosition.X, 0, btn.AbsolutePosition.Y + btn.AbsoluteSize.Y),
            BackgroundColor3 = Theme.panel2,
            ZIndex = 201,
        }, {})
        addCorner(popup, 8)
        addStroke(popup, Theme.stroke, 1, 0.5)
        popup.Parent = rootGui

        local scroll = create("ScrollingFrame", {
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            ScrollBarThickness = 6,
            CanvasSize = UDim2.new(0, 0, 0, #options * 26),
            ZIndex = 202,
        }, {})
        scroll.Parent = popup

        local layout = Instance.new("UIListLayout")
        layout.Padding = UDim.new(0, 4)
        layout.Parent = scroll

        for _, name in ipairs(options) do
            local item = create("TextButton", {
                Size = UDim2.new(1, -8, 0, 24),
                BackgroundColor3 = Theme.control,
                Text = name,
                TextColor3 = Theme.text,
                Font = FONT,
                TextSize = 14,
                ZIndex = 203,
            }, {})
            addCorner(item, 6)
            item.Parent = scroll

            item.MouseButton1Click:Connect(function()
                selected[name] = not selected[name]
                item.BackgroundColor3 = selected[name] and Theme.accent or Theme.control
                updateStatus()
                if callback then callback(selected) end
            end)
        end

        overlay.MouseButton1Click:Connect(function()
            overlay:Destroy()
            popup:Destroy()
            openPopup = nil
        end)

        openPopup = popup
    end

    btn.MouseButton1Click:Connect(function()
        if openPopup then
            openPopup:Destroy()
            openPopup = nil
        else
            open()
        end
    end)

    return {
        Get = function() return selected end,
        Set = function(tbl)
            selected = tbl or {}
            updateStatus()
            if callback then callback(selected) end
        end
    }
end

            function sectionAPI:TextBox(placeholder, callback)
                local box = create("TextBox", {
                    Size = UDim2.new(1, 0, 0, 34),
                    BackgroundColor3 = Theme.control,
                    TextColor3 = Theme.text,
                    Font = FONT,
                    TextSize = 14,
                    PlaceholderText = placeholder or "",
                    ClearTextOnFocus = false,
                }, {})
                addCorner(box, 8)
                addStroke(box, Theme.stroke, 1, 0.5)
                box.Parent = stack

                box.FocusLost:Connect(function(enterPressed)
                    if callback then callback(box.Text, enterPressed) end
                end)

                return box
            end

function sectionAPI:TextBind(labelText, initKey, callback)
    local row = create("Frame", {
        Size = UDim2.new(1, 0, 0, 34),
        BackgroundTransparency = 1,
    }, {})
    row.Parent = stack

    local lbl = create("TextLabel", {
        Size = UDim2.new(0.7, 0, 1, 0),
        BackgroundTransparency = 1,
        Text = labelText,
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, {})
    lbl.Parent = row

    local keyBtn = create("TextButton", {
        Size = UDim2.new(0.3, -6, 1, 0),
        Position = UDim2.new(0.7, 6, 0, 0),
        BackgroundColor3 = Theme.control,
        TextColor3 = Theme.text,
        Font = FONT_B,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Center,
        Text = (initKey and initKey.Name) or "RightShift",
    }, {})
    addCorner(keyBtn, 8)
    addStroke(keyBtn, Theme.stroke, 1, 0.5)
    keyBtn.Parent = row

    local bindKey: Enum.KeyCode = initKey or Enum.KeyCode.RightShift
    local recording = false

    keyBtn.MouseButton1Click:Connect(function()
        recording = true
        keyBtn.Text = "Press key..."
        keyBtn.BackgroundColor3 = Theme.accentDim
    end)

    UIS.InputBegan:Connect(function(input, gp)
        if gp then return end
        if recording and input.UserInputType == Enum.UserInputType.Keyboard then
            bindKey = input.KeyCode
            keyBtn.Text = bindKey.Name
            keyBtn.BackgroundColor3 = Theme.control
            recording = false
        elseif input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == bindKey then
            if callback then callback() end
        end
    end)

    return {
        SetBind = function(newKey)
            bindKey = newKey
            keyBtn.Text = bindKey.Name
        end
    }
end

function sectionAPI:ToggleColor(text, defaultState, defaultColor, callback)
-- добавить небольшой верхний отступ, чтобы не прилипать к заголовку under section
local spacer = create("Frame", {
    Size = UDim2.new(1, 0, 0, 12), -- можно 6..12 по вкусу
    BackgroundTransparency = 1,
}, {})
spacer.Parent = stack


    local row = create("Frame", {
        Size = UDim2.new(1, 0, 0, 34),
        BackgroundTransparency = 1,
    }, {})
    row.Parent = stack


    -- инлайновый toggle в этом же ряду
    local state = defaultState or false
    local box = create("TextButton", {
        Size = UDim2.new(0, 28, 0, 28),
        Position = UDim2.new(0, 0, 0, 3),
        BackgroundColor3 = state and Theme.accent or Theme.control,
        Text = "",
    }, {})
    addCorner(box, 6)
    addStroke(box, Theme.stroke, 1, 0.5)
    box.Parent = row

    local lbl = create("TextLabel", {
        Size = UDim2.new(1, -36-36, 1, 0), -- оставим место под кнопку цвета справа
        Position = UDim2.new(0, 36, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, {})
    lbl.Parent = row

    -- кнопка цвета справа в том же ряду
    local colorBtn = create("TextButton", {
        Size = UDim2.new(0, 28, 0, 28),
        Position = UDim2.new(1, -32, 0, 3),
        BackgroundColor3 = defaultColor or Theme.accent,
        Text = "",
        ZIndex = 5,
    }, {})
    addCorner(colorBtn, 6)
    addStroke(colorBtn, Theme.stroke, 1, 0.5)
    colorBtn.Parent = row

    local function setToggle(newState)
        state = newState
        box.BackgroundColor3 = state and Theme.accent or Theme.control
        if callback then callback(state, colorBtn.BackgroundColor3) end
    end

    box.MouseButton1Click:Connect(function()
        setToggle(not state)
    end)

    colorBtn.MouseButton1Click:Connect(function()
        local rootGui = stack:FindFirstAncestorOfClass("ScreenGui")
        createColorPickerPopup(rootGui, colorBtn.BackgroundColor3, function(newColor)
            colorBtn.BackgroundColor3 = newColor
            if callback then callback(state, colorBtn.BackgroundColor3) end
        end)
    end)

    -- начальное уведомление
    if callback then callback(state, colorBtn.BackgroundColor3) end

    return {
        Set = function(s, c)
            setToggle(s)
            if c then colorBtn.BackgroundColor3 = c end
            if callback then callback(state, colorBtn.BackgroundColor3) end
        end,
        Get = function()
            return state, colorBtn.BackgroundColor3
        end
    }
end

function sectionAPI:ToggleDualColor(text, defaultState, c1, c2, callback)
-- добавить небольшой верхний отступ, чтобы не прилипать к заголовку under section
local spacer = create("Frame", {
    Size = UDim2.new(1, 0, 0, 12), -- можно 6..12 по вкусу
    BackgroundTransparency = 1,
}, {})
spacer.Parent = stack


    local row = create("Frame", {
        Size = UDim2.new(1, 0, 0, 34),
        BackgroundTransparency = 1,
    }, {})
    row.Parent = stack

    -- инлайновый toggle
    local state = defaultState or false
    local box = create("TextButton", {
        Size = UDim2.new(0, 28, 0, 28),
        Position = UDim2.new(0, 0, 0, 3),
        BackgroundColor3 = state and Theme.accent or Theme.control,
        Text = "",
    }, {})
    addCorner(box, 6)
    addStroke(box, Theme.stroke, 1, 0.5)
    box.Parent = row

    local lbl = create("TextLabel", {
        Size = UDim2.new(1, -36-68, 1, 0), -- оставим место под две кнопки справа
        Position = UDim2.new(0, 36, 0, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = Theme.text,
        Font = FONT,
        TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Left,
    }, {})
    lbl.Parent = row

    -- две кнопки цвета справа, в том же ряду
    local btn1 = create("TextButton", {
        Size = UDim2.new(0, 28, 0, 28),
        Position = UDim2.new(1, -64, 0, 3),
        BackgroundColor3 = c1 or Theme.accent,
        Text = "",
        ZIndex = 5,
    }, {})
    addCorner(btn1, 6)
    addStroke(btn1, Theme.stroke, 1, 0.5)
    btn1.Parent = row

    local btn2 = create("TextButton", {
        Size = UDim2.new(0, 28, 0, 28),
        Position = UDim2.new(1, -32, 0, 3),
        BackgroundColor3 = c2 or Theme.good,
        Text = "",
        ZIndex = 5,
    }, {})
    addCorner(btn2, 6)
    addStroke(btn2, Theme.stroke, 1, 0.5)
    btn2.Parent = row

    local function notify()
        if callback then
            callback(state, btn1.BackgroundColor3, btn2.BackgroundColor3)
        end
    end

    local function setToggle(newState)
        state = newState
        box.BackgroundColor3 = state and Theme.accent or Theme.control
        notify()
    end

    box.MouseButton1Click:Connect(function()
        setToggle(not state)
    end)

    local function openPicker(btn)
        local rootGui = stack:FindFirstAncestorOfClass("ScreenGui")
        createColorPickerPopup(rootGui, btn.BackgroundColor3, function(newColor)
            btn.BackgroundColor3 = newColor
            notify()
        end)
    end

    btn1.MouseButton1Click:Connect(function() openPicker(btn1) end)
    btn2.MouseButton1Click:Connect(function() openPicker(btn2) end)

    notify()

    return {
        Set = function(s, nc1, nc2)
            setToggle(s)
            if nc1 then btn1.BackgroundColor3 = nc1 end
            if nc2 then btn2.BackgroundColor3 = nc2 end
            notify()
        end,
        Get = function()
            return state, btn1.BackgroundColor3, btn2.BackgroundColor3
        end
    }
end

            return {
                Raw = sec,
                API = sectionAPI,
            }
        end

        local pageAPI = {}

        function pageAPI:AddUnderSections(leftName: string, rightName: string)
            local leftSec = makeSection(leftCol, leftName)
            local rightSec = makeSection(rightCol, rightName)
            return leftSec.API, rightSec.API
        end

        function pageAPI:SetNameOfMainSection(newName: string)
            -- Tab title is leftTitle when active
            tabs[tabName].button.Text = newName
        end

        return pageAPI
    end

    function api:SetHeader(leftText: string, rightText: string)
        leftTitle.Text = leftText
        rightTitle.Text = rightText
    end

    return api
end

return RoundedUI
